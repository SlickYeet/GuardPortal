// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String      @id
    name          String
    email         String
    emailVerified Boolean
    image         String?     @default("https://gravatar.com/avatar/HASH")
    createdAt     DateTime
    updatedAt     DateTime
    sessions      Session[]
    accounts      Account[]
    config        PeerConfig?

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model PeerConfig {
    id                String  @id @default(cuid())
    name              String
    publicKey         String
    privateKey        String
    allowedIPs        String
    endpoint          String
    endpointAllowedIP String
    dns               String
    preSharedKey      String?
    mtu               Int?    @default(1420)
    keepAlive         Int?    @default(21)

    configurationId String
    configuration   Configuration @relation(fields: [configurationId], references: [id], onDelete: Cascade)

    userId String? @unique
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Configuration {
    id         String @id @default(cuid())
    name       String
    address    String
    listenPort String
    publicKey  String
    privateKey String

    PeerConfig PeerConfig[]
}
